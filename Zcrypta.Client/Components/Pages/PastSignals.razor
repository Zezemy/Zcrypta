@page "/pastSignals"
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.SignalR.Client
@using Zcrypta.Entities.Dtos
@using Zcrypta.Entities.Enums
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Past Signals</PageTitle>

@if (!IsConnected)
{
    <p><em>Loading...</em></p>
}
else
{
    @* <MudTextField @bind-Value="tickerInput" Label="Enter a ticker" Variant="Variant.Outlined" Class=""></MudTextField> *@

    @* <MudButton Class="ms-4" OnClick="() =>JoinTicker(tickerInput)" Disabled="@(!IsConnected)" Variant="Variant.Filled" Color="Color.Primary">Join to Ticker</MudButton> *@

    <MudTable Items="signals" Dense=true Filter="new Func<TradingSignal,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Past Signals</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Symbol</MudTh>
            <MudTh>Strategy Type</MudTh>
            <MudTh>Signal Type</MudTh>
            <MudTh>Interval</MudTh>
            <MudTh>Date Time</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Symbol">@context.Symbol</MudTd>
            <MudTd DataLabel="StrategyType">@context.StrategyType</MudTd>
            <MudTd DataLabel="SignalType" Class="@(context.SignalType==SignalTypes.Buy? "pa-4 mud-theme-success" :(context.SignalType==SignalTypes.Sell? "pa-4 mud-theme-error": "pa-4 mud-background-gray"))">@context.SignalType</MudTd>
            <MudTd DataLabel="Interval">@context.Interval</MudTd>
            <MudTd DataLabel="DateTime">@context.DateTime</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private HubConnection? tradingSignalSenderHubConnection;
    private List<TradingSignal> signals = new List<TradingSignal>();
    private string? tickerInput;

    protected override async Task OnInitializedAsync()
    {
        tradingSignalSenderHubConnection = new HubConnectionBuilder()
        .WithUrl(Configuration["BackendUrl"] + "/trading-signal-sender-hub")
        .Build();
        await SetHubConnection(tradingSignalSenderHubConnection, signals);

        await JoinDefaultTickers(StrategyTypes.MaCrossover);
        await JoinDefaultTickers(StrategyTypes.Macd);
        await JoinDefaultTickers(StrategyTypes.Rsi);
        await JoinDefaultTickers(StrategyTypes.BollingerBands);
        await JoinDefaultTickers(StrategyTypes.StochasticOscillator);
        await JoinDefaultTickers(StrategyTypes.TripleMaCrossover);
        await JoinDefaultTickers(StrategyTypes.PriceChannel);
        await JoinDefaultTickers(StrategyTypes.VolumePriceTrend);
        await JoinDefaultTickers(StrategyTypes.Momentum);
        await JoinDefaultTickers(StrategyTypes.ExponentialMaCrossoverWithVolume);
    }

    private async Task JoinTicker(string? ticker, StrategyTypes strategyType, HubConnection hubConnection)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinStockGroup", ticker, strategyType);
        }
    }

    public async Task JoinDefaultTickers(StrategyTypes strategyType)
    {
        List<string> defaultTickers = new List<string> { "BTCUSDT", "ETHUSDT", "SUIUSDT", "ACAUSDT", "AIUSDT", "STRKUSDT", "ZKUSDT", "USDTTRY" };
        foreach (var ticker in defaultTickers)
        {
            await JoinTicker(ticker, strategyType, tradingSignalSenderHubConnection);
        }
    }

    public bool IsConnected =>
        tradingSignalSenderHubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (tradingSignalSenderHubConnection is not null)
        {
            await tradingSignalSenderHubConnection.DisposeAsync();
        }
    }

    protected async Task SetHubConnection(HubConnection hubConnection, List<TradingSignal> signals)
    {
        hubConnection.On<TradingSignal>("ReceiveSignalUpdate", (signal) =>
        {
            // if (!signals.Any(x => x.Symbol == signal.Symbol && x.StrategyType == signal.StrategyType))
            // {
            //     signals.Add(signal);
            // }
            // else
            // {
            //     var signalInList = signals.Where(x => x.Symbol == signal.Symbol && x.StrategyType == signal.StrategyType).First();
            //     var index = signals.IndexOf(signalInList);
            //     signals[index] = signal;
            // }
            signals.Add(signal);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private string searchString1 = "";
    private TradingSignal selectedItem1 = null;
    private HashSet<TradingSignal> selectedItems = new HashSet<TradingSignal>();
    private bool FilterFunc1(TradingSignal signal) => FilterFunc(signal, searchString1);

    private bool FilterFunc(TradingSignal signal, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (signal.Symbol.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (signal.SignalType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (signal.Interval.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}