@page "/dashboard"
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.SignalR.Client
@using Zcrypta.Entities.Dtos
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Dashboard</PageTitle>

@if (!IsConnected)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="d-flex flex-row align-center justify-center mud-width-full">
        <MudTextField @bind-Value="tickerInput"
                      Label="Enter a symbol"
                      Variant="Variant.Outlined"
                      Class="me-4">
        </MudTextField>

        <MudButton Class="ms-2"
                   OnClick="@(() => JoinTicker(tickerInput))"
                   Disabled="@(!IsConnected)"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@* 
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Inherit"/> *@
            +
        </MudButton>
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudText Typo="Typo.h4" Class="mb-2">Market</MudText>
        @if (prices.Count == 0)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudGrid Gutter="2">
                @foreach (var price in prices)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="3">
                            <MudCardContent Class="d-flex justify-content-between align-items-center gap-4">
                                <!-- Left: Symbol (Base) -->
                                <MudElement Class="mt-2 overflow-auto">
                                    <MudText Typo="Typo.h6">
                                        @price.Value.TradingPair.Base
                                    </MudText>
                                </MudElement>

                                <!-- Right: Price Details -->
                                <MudElement Class="d-flex flex-column align-items-end flex-grow-1">
                                    <!-- Price Change -->
                                    <MudText Typo="Typo.body2" Class="d-flex justify-end gap-2" Color="@GetPriceColor(price.Value.PriceChange)">
                                        <MudElement>
                                            @(price.Value.PriceChange.ToString("0.00"))
                                        </MudElement>
                                        <MudElement>
                                            (@(price.Value.PriceChangePercent.ToString("0.00"))%)
                                        </MudElement>
                                        <MudIcon Icon="@GetPriceIcon(price.Value.PriceChange)" Class="ms-1" />
                                    </MudText>

                                    <!-- Current Price -->
                                    <MudText Typo="Typo.body1" Class="d-flex justify-end ">
                                        @(price.Value.LastPrice.ToString("0.00") + " " + @price.Value.TradingPair.Quote)
                                    </MudText>
                                </MudElement>
                            </MudCardContent>

                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudContainer>
}

@code {
    private HubConnection? hubConnection;
    private Dictionary<string, TradingDayTicker> prices = [];
    private string? tickerInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["BackendUrl"] + "/pricehub")
            .Build();

        hubConnection.On<TradingDayTicker>("ReceiveStockPriceUpdate", (price) =>
        {
            if (!prices.ContainsKey(price.Symbol))
            {
                prices.Add(price.Symbol, price);
            }
            else
            {
                prices[price.Symbol] = price;
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();



        List<string> defaultTickers = new List<string> { "BTCUSDT", "ETHUSDT", "SAGAUSDT", "SUIUSDT", "USDTTRY", "MAVUSDT", "ZKUSDT", "ACAUSDT" };

        foreach (var ticker in defaultTickers)
        {
            await JoinTicker(ticker);
        }
    }

    private async Task JoinTicker(string? ticker)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinStockGroup", ticker);
        }
    }

    private MudBlazor.Color GetPriceColor(decimal change)
    {
        return change > 0 ? MudBlazor.Color.Success :
               change < 0 ? MudBlazor.Color.Error :
               MudBlazor.Color.Default;
    }

    private string GetPriceIcon(decimal change)
    {
        return change > 0 ? Icons.Material.Filled.ArrowUpward :
               change < 0 ? Icons.Material.Filled.ArrowDownward :
               Icons.Material.Filled.Remove;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}