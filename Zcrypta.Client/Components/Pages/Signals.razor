@page "/signals"
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.SignalR.Client
@using Zcrypta.Entities.Dtos
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Signals</PageTitle>

@if (!IsConnected)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex flex-grow-1 gap-4">
        @* <MudTextField @bind-Value="tickerInput" Label="Enter a ticker" Variant="Variant.Outlined" Class=""></MudTextField> *@

        @* <MudButton Class="ms-4" OnClick="() =>JoinTicker(tickerInput)" Disabled="@(!IsConnected)" Variant="Variant.Filled" Color="Color.Primary">Join to Ticker</MudButton> *@

        @if (maSignals.Count == 0)
        {
            <p><em>Ma Signals Loading...</em></p>
        }
        else
        {
            <div class="ms-4 flex-grow-1">
                <ul id="signalList">
                    @foreach (var signal in maSignals)
                    {
                        <li>@signal.Value.Symbol : @signal.Value.SignalType : @signal.Value.DateTime</li>
                    }
                </ul>
            </div>
        }
        @if (rsiSignals.Count == 0)
        {
            <p><em>Rsi Signals Loading...</em></p>
        }
        else
        {
            <div class="ms-4 flex-grow-1">
                <ul id="signalList">
                    @foreach (var signal in rsiSignals)
                    {
                        <li>@signal.Value.Symbol : @signal.Value.SignalType : @signal.Value.DateTime</li>
                    }
                </ul>
            </div>
        }
        @if (macdSignals.Count == 0)
        {
            <p><em>Macd Signals Loading...</em></p>
        }
        else
        {
            <div class="ms-4 flex-grow-1">
                <ul id="signalList">
                    @foreach (var signal in macdSignals)
                    {
                        <li>@signal.Value.Symbol : @signal.Value.SignalType : @signal.Value.DateTime</li>
                    }
                </ul>
            </div>
        }
        @if (bollingerBandsSignals.Count == 0)
        {
            <p><em>Bollinger Bands Signals Loading...</em></p>
        }
        else
        {
            <div class="ms-4 flex-grow-1">
                <ul id="signalList">
                    @foreach (var signal in bollingerBandsSignals)
                    {
                        <li>@signal.Value.Symbol : @signal.Value.SignalType : @signal.Value.DateTime</li>
                    }
                </ul>
            </div>
        }
        @if (stochasticOscillatorSignals.Count == 0)
        {
            <p><em>Stochastic Oscillator Signals Loading...</em></p>
        }
        else
        {
            <div class="ms-4 flex-grow-1">
                <ul id="signalList">
                    @foreach (var signal in stochasticOscillatorSignals)
                    {
                        <li>@signal.Value.Symbol : @signal.Value.SignalType : @signal.Value.DateTime</li>
                    }
                </ul>
            </div>
        }
    </div>
}

@code {
    private HubConnection? maHubConnection, rsiHubConnection, macdHubConnection, bollingerBandsHubConnection, 
    stochasticOscillatorHubConnection;
    private Dictionary<string, TradingSignal> maSignals = [];
    private Dictionary<string, TradingSignal> rsiSignals = [];
    private Dictionary<string, TradingSignal> macdSignals = [];
    private Dictionary<string, TradingSignal> bollingerBandsSignals = [];
    private Dictionary<string, TradingSignal> stochasticOscillatorSignals = [];
    private string? tickerInput;

    protected override async Task OnInitializedAsync()
    {
        maHubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["BackendUrl"] + "/ma-hub")
            .Build();
        rsiHubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["BackendUrl"] + "/rsi-hub")
            .Build();
        macdHubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["BackendUrl"] + "/macd-hub")
            .Build();
        bollingerBandsHubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["BackendUrl"] + "/bollinger-bands-hub")
            .Build();
        stochasticOscillatorHubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["BackendUrl"] + "/stochastic-oscillator-hub")
            .Build();
        await SetHubConnection(maHubConnection, maSignals);
        await SetHubConnection(rsiHubConnection, rsiSignals);
        await SetHubConnection(macdHubConnection, macdSignals);
        await SetHubConnection(bollingerBandsHubConnection, bollingerBandsSignals);
        await SetHubConnection(stochasticOscillatorHubConnection, stochasticOscillatorSignals);

        List<string> defaultTickers = new List<string> { "BTCUSDT", "ETHUSDT", "SUIUSDT", "ACAUSDT", "AIUSDT"};

        foreach (var ticker in defaultTickers)
        {
            await JoinTicker(ticker, maHubConnection);
        }

        foreach (var ticker in defaultTickers)
        {
            await JoinTicker(ticker, rsiHubConnection);
        }

        foreach (var ticker in defaultTickers)
        {
            await JoinTicker(ticker, macdHubConnection);
        }

        foreach (var ticker in defaultTickers)
        {
            await JoinTicker(ticker, bollingerBandsHubConnection);
        }

        foreach (var ticker in defaultTickers)
        {
            await JoinTicker(ticker, stochasticOscillatorHubConnection);
        }
    }

    private async Task JoinTicker(string? ticker, HubConnection hubConnection)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinStockGroup", ticker);
        }
    }

    public bool IsConnected =>
        maHubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (maHubConnection is not null)
        {
            await maHubConnection.DisposeAsync();
        }
        if (rsiHubConnection is not null)
        {
            await rsiHubConnection.DisposeAsync();
        }
        if (macdHubConnection is not null)
        {
            await macdHubConnection.DisposeAsync();
        }
        if (bollingerBandsHubConnection is not null)
        {
            await bollingerBandsHubConnection.DisposeAsync();
        }
        if (stochasticOscillatorHubConnection is not null)
        {
            await stochasticOscillatorHubConnection.DisposeAsync();
        }
    }

    protected async Task SetHubConnection(HubConnection hubConnection, Dictionary<string, TradingSignal> signals)
    {
        hubConnection.On<TradingSignal>("ReceiveSignalUpdate", (signal) =>
        {
            if (!signals.ContainsKey(signal.Symbol))
            {
                signals.Add(signal.Symbol, signal);
            }
            else
            {
                signals[signal.Symbol] = signal;
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
}