@page "/prices"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using Zcda.Entities.Dtos
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Prices</PageTitle>

<div class="form-group">
    <label>
        Ticker:
        <input @bind="tickerInput" size="50" />
    </label>
</div>
<button @onclick="JoinTicker" disabled="@(!IsConnected)">Join to Ticker</button>

<hr>

<ul id="priceList">
    @foreach (var price in prices)
    {
        <li>@price.Value.Symbol : @price.Value.Price</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private Dictionary<string, CurrentPrice> prices = [];
    private string? tickerInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/pricehub"))
            .Build();

        hubConnection.On<CurrentPrice>("ReceiveStockPriceUpdate", (price) =>
        {
            if (!prices.ContainsKey(price.Symbol))
            {
                prices.Add(price.Symbol, price);
            }
            else
            {
                prices[price.Symbol] = price;
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinTicker()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinStockGroup", tickerInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}